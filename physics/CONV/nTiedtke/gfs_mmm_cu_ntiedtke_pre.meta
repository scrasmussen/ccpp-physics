[ccpp-table-properties]
  name = gfs_mmm_cu_ntiedtke_pre
  type = scheme
  dependencies = ../../hooks/machine.F

########################################################################
[ccpp-arg-table]
  name = gfs_mmm_cu_ntiedtke_pre_run
  type = scheme
[nCol]
  standard_name = horizontal_loop_extent
  long_name = horizontal loop extent
  units = count
  dimensions = ()
  type = integer
  intent = in
[nLev]
  standard_name = vertical_layer_dimension
  long_name = number of vertical levels
  units = count
  dimensions = ()
  type = integer
  intent = in
[temp]
  standard_name = air_temperature
  long_name = model layer mean temperature
  units = K
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = in
[spechum]
  standard_name = specific_humidity
  long_name = water vapor specific humidity
  units = kg kg-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = in
[temp_new]
  standard_name = air_temperature_of_new_state
  long_name = temperature updated by physics
  units = K
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = inout
[spechum_new]
  standard_name = specific_humidity_of_new_state
  long_name = water vapor specific humidity updated by physics
  units = kg kg-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = inout
[qv]
  standard_name = water_vapor_mixing_ratio
  long_name = water vapor mixing ratio
  units = kg kg-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = out
  optional = T
[flag_init]
  standard_name = flag_for_first_timestep
  long_name = flag signaling first time step for time integration loop
  units = flag
  dimensions = ()
  type = logical
  intent = in
[flag_restart]
  standard_name = flag_for_restart
  long_name = flag for restart (warmstart) or coldstart
  units = flag
  dimensions = ()
  type = logical
  intent = in
[kdt]
  standard_name = index_of_timestep
  long_name = current forecast iteration
  units = index
  dimensions = ()
  type = integer
  intent = in
[fhour]
  standard_name = forecast_time
  long_name = curent forecast time
  units = h
  dimensions = ()
  type = real
  kind = kind_phys
  intent = in
[dtp]
  standard_name = timestep_for_physics
  long_name = physics timestep
  units = s
  dimensions = ()
  type = real
  kind = kind_phys
  intent = in
[prevst]
  standard_name = air_temperature_on_previous_timestep
  long_name = temperature from previous time step
  units = K
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = in
  optional = True
[prevsq]
  standard_name = specific_humidity_on_previous_timestep
  long_name = moisture from previous time step
  units = kg kg-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = in
  optional = True
[forcet]
  standard_name = tendency_of_air_temperature_due_to_nonphysics
  long_name = temperature tendency due to dynamics only
  units = K s-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = out
  optional = True
[forceq]
  standard_name = tendendy_of_water_vapor_mixing_ratio_due_to_nonphysics
  long_name = moisture tendency due to dynamics only
  units = kg kg-1 s-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = out
  optional = True
[qc]
  standard_name = cloud_condensed_water_mixing_ratio_convective_transport_tracer
  long_name = ratio of mass of cloud water to mass of dry air plus vapor (without condensates) in the convectively transported tracer array
  units = kg kg-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = inout
[qi]
  standard_name = ice_water_mixing_ratio_convective_transport_tracer
  long_name = ratio of mass of ice water to mass of dry air plus vapor (without condensates) in the convectively transported tracer array
  units = kg kg-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = inout
[ugrs]
  standard_name = x_wind_of_new_state
  long_name = updated x-direction wind
  units = m s-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = inout
[vgrs]
  standard_name = y_wind_of_new_state
  long_name = updated y-direction wind
  units = m s-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = inout
[pres]
  standard_name = air_pressure
  long_name = mean layer pressure
  units = Pa
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = inout
[presi]
  standard_name = air_pressure_at_interface
  long_name = air pressure at model layer interfaces
  units = Pa
  dimensions = (horizontal_loop_extent,vertical_interface_dimension)
  type = real
  kind = kind_phys
  intent = inout
[geop]
  standard_name = geopotential
  long_name = geopotential at model layer centers
  units = m2 s-2
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  intent = in
[geopi]
  standard_name = geopotential_at_interface
  long_name = geopotential at model layer interfaces
  units = m2 s-2
  dimensions = (horizontal_loop_extent,vertical_interface_dimension)
  type = real
  kind = kind_phys
  intent = in
[con_1ovg]
  standard_name = one_divided_by_the_gravitational_acceleration
  long_name = inverse of gravitational acceleration
  units = s2 m-1
  dimensions = ()
  type = real
  kind = kind_phys
  intent = in
[geoph]
  standard_name = geopotential_height
  long_name = geopotential height at model layer centers
  units = m
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  intent = out
  optional = T
[geophi]
  standard_name = geopotential_height_at_interface
  long_name = geopotential height at model layer interfaces
  units = m
  dimensions = (horizontal_loop_extent,vertical_interface_dimension)
  type = real
  kind = kind_phys
  intent = out
  optional = T
[pomg]
  standard_name = lagrangian_tendency_of_air_pressure
  long_name = layer mean vertical velocity
  units = Pa s-1
  dimensions = (horizontal_loop_extent,vertical_layer_dimension)
  type = real
  kind = kind_phys
  intent = inout
[wet]
  standard_name = flag_nonzero_wet_surface_fraction
  long_name = flag indicating presence of some ocean or lake surface area fraction
  units = flag
  dimensions = (horizontal_loop_extent)
  type = logical
  intent = in
[dry]
  standard_name = flag_nonzero_land_surface_fraction
  long_name = flag indicating presence of some land surface area fraction
  units = flag
  dimensions = (horizontal_loop_extent)
  type = logical
  intent = in
[icy]
  standard_name = flag_nonzero_sea_ice_surface_fraction
  long_name = flag indicating presence of some sea ice surface area fraction
  units = flag
  dimensions = (horizontal_loop_extent)
  type = logical
  intent = in
[ep1]
  standard_name = ratio_of_vapor_to_dry_air_gas_constants_minus_one
  long_name = rv/rd - 1 (rv = ideal gas constant for water vapor)
  units = none
  dimensions = ()
  type = real
  kind = kind_phys
  intent = in
[con_rd]
  standard_name = gas_constant_of_dry_air
  long_name = ideal gas constant for dry air
  units = J kg-1 K-1
  dimensions = ()
  type = real
  kind = kind_phys
  intent = in
[con_cp]
  standard_name = specific_heat_of_dry_air_at_constant_pressure
  long_name = specific heat of dry air at constant pressure
  units = J kg-1 K-1
  dimensions = ()
  type = real
  kind = kind_phys
  intent = in
[ps]
  standard_name = surface_air_pressure
  long_name = surface pressure
  units = Pa
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = in
[hfx_wat]
  standard_name = kinematic_surface_upward_sensible_heat_flux_over_water
  long_name = kinematic surface upward sensible heat flux over water
  units = K m s-1
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = in
[hfx_lnd]
  standard_name = kinematic_surface_upward_sensible_heat_flux_over_land
  long_name = kinematic surface upward sensible heat flux over land
  units = K m s-1
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = in
[hfx_ice]
  standard_name = kinematic_surface_upward_sensible_heat_flux_over_ice
  long_name = kinematic surface upward sensible heat flux over ice
  units = K m s-1
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = in
[hfx]
  standard_name = kinematic_surface_upward_sensible_heat_flux
  long_name = kinematic surface upward sensible heat flux
  units = W m-2
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = out
  optional = T
[qfx_wat]
  standard_name = kinematic_surface_upward_latent_heat_flux_over_water
  long_name = kinematic surface upward latent heat flux over water
  units = kg kg-1 m s-1
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = in
[qfx_lnd]
  standard_name = kinematic_surface_upward_latent_heat_flux_over_land
  long_name = kinematic surface upward latent heat flux over land
  units = kg kg-1 m s-1
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = in
[qfx_ice]
  standard_name = kinematic_surface_upward_latent_heat_flux_over_ice
  long_name = kinematic surface upward latent heat flux over ice
  units = kg kg-1 m s-1
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = in
[qfx]
  standard_name = kinematic_surface_upward_latent_heat_flux
  long_name = kinematic surface upward latent heat flux
  units = W m-2
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = out
  optional = T
[slimask]
  standard_name = sea_land_ice_mask
  long_name = landmask: sea/land/ice=0/1/2
  units = flag
  dimensions = (horizontal_loop_extent)
  type = integer
  intent = in
[xland]
  standard_name = sea_land_ice_mask_mmm
  long_name = sea/land/ice mask mmm
  units = flag
  dimensions = (horizontal_loop_extent)
  type = real
  kind = kind_phys
  intent = out
  optional = T
[errmsg]
  standard_name = ccpp_error_message
  long_name = error message for error handling in CCPP
  units = none
  dimensions = ()
  type = character
  kind = len=*
  intent = out
[errflg]
  standard_name = ccpp_error_code
  long_name = error code for error handling in CCPP
  units = 1
  dimensions = ()
  type = integer
  intent = out
